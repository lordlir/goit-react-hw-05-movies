{"version":3,"file":"static/js/186.63233fa4.chunk.js","mappings":"yNAqCA,UAjCgB,SAAAA,GACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAc,mCAAG,WAAMC,GAAN,iGAEAC,EAAAA,EAAAA,IAAYD,GAFZ,OAEbE,EAFa,OAGnBN,EAAWM,EAAKC,SAHG,gDAKnBC,QAAQC,IAAR,MALmB,qGAAH,sDAcpB,OAJAC,EAAAA,EAAAA,YAAU,WACRP,EAAeF,EAChB,GAAE,CAACA,KAGF,wBACGF,EAAQY,OAAS,EAChBZ,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,OAAQT,EAAX,EAAWA,GAAX,OACV,yBACE,uBAAIS,KADGT,EADC,KAMZ,kCAIP,C,+LClCKU,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHc,+BAKP,IAAMC,EAAU,mCAAG,2GAAOC,EAAP,+BAAqB,MAArB,kBAECF,EAAAA,EAAAA,IAAA,0BAA6BE,GAAe,CACjEC,OAAQ,CACNC,QAASL,KAJS,uBAEdR,EAFc,EAEdA,KAFc,kBAOfA,GAPe,gCAStBE,QAAQY,MAAR,MATsB,yDAAH,qDAaVC,EAAU,mCAAG,WAAMC,GAAN,kGAECP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNC,QAASL,EACTS,MAAOD,KALW,uBAEdhB,EAFc,EAEdA,KAFc,kBAQfA,GARe,gCAUtBE,QAAQY,MAAR,MAVsB,yDAAH,sDAcVI,EAAW,mCAAG,WAAMC,GAAN,kGAEAV,EAAAA,EAAAA,IAAA,iBAAoBU,GAAY,CACrDP,OAAQ,CACNC,QAASL,KAJU,uBAEfR,EAFe,EAEfA,KAFe,kBAOhBA,GAPgB,gCASvBE,QAAQY,MAAR,MATuB,yDAAH,sDAaXM,EAAQ,mCAAG,WAAMD,GAAN,kGAEGV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJO,uBAEZR,EAFY,EAEZA,KAFY,kBAObA,GAPa,gCASpBE,QAAQY,MAAR,MAToB,yDAAH,sDAaRf,EAAW,mCAAG,WAAMoB,GAAN,kGAEAV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJU,uBAEfR,EAFe,EAEfA,KAFe,kBAOhBA,GAPgB,gCASvBE,QAAQY,MAAR,MATuB,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","servisApi/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { dataReviews } from 'servisApi/api';\n\nconst Reviews = props => {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  const getDataReviews = async id => {\n    try {\n      const data = await dataReviews(id);\n      setReviews(data.results);\n    } catch (error) {\n      console.log(error);\n    } finally {\n    }\n  };\n\n  useEffect(() => {\n    getDataReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.length > 0 ? (\n        reviews.map(({ author, id }) => (\n          <li key={id}>\n            <p>{author}</p>\n          </li>\n        ))\n      ) : (\n        <p>empty</p>\n      )}\n    </ul>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = 'bcf494ba38cb83576e131fd3ae18b8ee';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const dataMovies = async (time_window = 'day') => {\n  try {\n    const { data } = await axios.get(`/trending/movie/${time_window}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataSearch = async queryValue => {\n  try {\n    const { data } = await axios.get(`/search/movie`, {\n      params: {\n        api_key: KEY_API,\n        query: queryValue,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataDetails = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataCast = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataReviews = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["props","useState","reviews","setReviews","movieId","useParams","getDataReviews","id","dataReviews","data","results","console","log","useEffect","length","map","author","KEY_API","axios","dataMovies","time_window","params","api_key","error","dataSearch","queryValue","query","dataDetails","movie_id","dataCast"],"sourceRoot":""}