{"version":3,"file":"static/js/16.2a414466.chunk.js","mappings":"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","sources":["components/SearchForm/SearchForm.jsx","components/SearchMovies/SearchMovies.jsx","components/pages/Movies.jsx","servisApi/api.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [query, setMovie] = useState('');\n\n  const handleChange = e => {\n    setMovie(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return;\n    }\n    onSubmit(query);\n  };\n  return (\n    <form onSubmit={handleSubmit} action=\"\">\n      <input name=\"input\" type=\"text\" value={query} onChange={handleChange} />\n      <button>search</button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { dataSearch } from 'servisApi/api';\nimport Movies from 'components/pages/Movies';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\n\nconst SearchMovies = props => {\n  const [moviesFound, setMovieFound] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const valueParams = searchParams.get('movie');\n\n  const getSearchMovies = async queryValue => {\n    try {\n      const data = await dataSearch(queryValue);\n      setMovieFound(data.results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n    }\n  };\n\n  useEffect(() => {\n    if (valueParams) {\n      getSearchMovies(valueParams);\n    }\n  }, [valueParams]);\n\n  const handlSubmit = e => {\n    setSearchParams({ movie: e });\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={handlSubmit} />\n      {moviesFound.length > 0 && <Movies movies={moviesFound} />}\n    </>\n  );\n};\n\nexport default SearchMovies;\n","import React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { routes } from 'routes';\n\nconst Movies = ({ movies }) => {\n  const { pathname, search } = useLocation();\n  const urlImg = 'https://image.tmdb.org/t/p/w300';\n\n  return (\n    <ul>\n      {movies.map(({ original_title, id, poster_path }) => (\n        <li key={id}>\n          <NavLink\n            to={`${routes.MOVIES}/${id}`}\n            state={{ prevLocationPath: pathname + search }}\n          >\n            <img src={`${urlImg + poster_path}`} alt=\"poster\" width=\"50\" />\n            {original_title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = 'bcf494ba38cb83576e131fd3ae18b8ee';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const dataMovies = async (time_window = 'day') => {\n  try {\n    const { data } = await axios.get(`/trending/movie/${time_window}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataSearch = async queryValue => {\n  try {\n    const { data } = await axios.get(`/search/movie`, {\n      params: {\n        api_key: KEY_API,\n        query: queryValue,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataDetails = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataCast = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataReviews = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["SearchForm","onSubmit","useState","query","setMovie","e","preventDefault","trim","action","name","type","value","onChange","target","toLowerCase","props","moviesFound","setMovieFound","useSearchParams","searchParams","setSearchParams","valueParams","get","getSearchMovies","queryValue","dataSearch","data","results","console","error","useEffect","movie","length","Movies","movies","useLocation","pathname","search","map","original_title","id","poster_path","to","routes","state","prevLocationPath","src","alt","width","KEY_API","axios","dataMovies","time_window","params","api_key","dataDetails","movie_id","dataCast","dataReviews"],"sourceRoot":""}