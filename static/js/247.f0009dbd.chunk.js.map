{"version":3,"file":"static/js/247.f0009dbd.chunk.js","mappings":"yNAiCA,UA7Ba,SAAAA,GACX,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAAYH,EACb,GAAE,CAACA,IAEJ,IAAMG,EAAW,mCAAG,WAAMC,GAAN,iGAEGC,EAAAA,EAAAA,IAASD,GAFZ,OAEVE,EAFU,OAGhBP,EAAaO,EAAKC,MAHF,gDAKhBC,QAAQC,IAAR,MALgB,qGAAH,sDAUjB,OACE,wBACGX,EAAUY,OAAS,GAClBZ,EAAUa,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,UAAlB,OACZ,yBACE,uBAAID,KADGC,EADG,KAOrB,C,+LC9BKC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHc,+BAKP,IAAMC,EAAU,mCAAG,2GAAOC,EAAP,+BAAqB,MAArB,kBAECF,EAAAA,EAAAA,IAAA,0BAA6BE,GAAe,CACjEC,OAAQ,CACNC,QAASL,KAJS,uBAEdR,EAFc,EAEdA,KAFc,kBAOfA,GAPe,gCAStBE,QAAQY,MAAR,MATsB,yDAAH,qDAaVC,EAAU,mCAAG,WAAMC,GAAN,kGAECP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNC,QAASL,EACTS,MAAOD,KALW,uBAEdhB,EAFc,EAEdA,KAFc,kBAQfA,GARe,gCAUtBE,QAAQY,MAAR,MAVsB,yDAAH,sDAcVI,EAAW,mCAAG,WAAMC,GAAN,kGAEAV,EAAAA,EAAAA,IAAA,iBAAoBU,GAAY,CACrDP,OAAQ,CACNC,QAASL,KAJU,uBAEfR,EAFe,EAEfA,KAFe,kBAOhBA,GAPgB,gCASvBE,QAAQY,MAAR,MATuB,yDAAH,sDAaXf,EAAQ,mCAAG,WAAMoB,GAAN,kGAEGV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJO,uBAEZR,EAFY,EAEZA,KAFY,kBAObA,GAPa,gCASpBE,QAAQY,MAAR,MAToB,yDAAH,sDAaRM,EAAW,mCAAG,WAAMD,GAAN,kGAEAV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJU,uBAEfR,EAFe,EAEfA,KAFe,kBAOhBA,GAPgB,gCASvBE,QAAQY,MAAR,MATuB,yDAAH,qD","sources":["components/Cast/Cast.jsx","servisApi/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { dataCast } from 'servisApi/api';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = props => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getDataCast(movieId);\n  }, [movieId]);\n\n  const getDataCast = async id => {\n    try {\n      const data = await dataCast(id);\n      setMovieCast(data.cast);\n    } catch (error) {\n      console.log(error);\n    } finally {\n    }\n  };\n\n  return (\n    <ul>\n      {movieCast.length > 0 &&\n        movieCast.map(({ original_name, credit_id }) => (\n          <li key={credit_id}>\n            <p>{original_name}</p>\n          </li>\n        ))}\n    </ul>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = 'bcf494ba38cb83576e131fd3ae18b8ee';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const dataMovies = async (time_window = 'day') => {\n  try {\n    const { data } = await axios.get(`/trending/movie/${time_window}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataSearch = async queryValue => {\n  try {\n    const { data } = await axios.get(`/search/movie`, {\n      params: {\n        api_key: KEY_API,\n        query: queryValue,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataDetails = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataCast = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const dataReviews = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["props","useState","movieCast","setMovieCast","movieId","useParams","useEffect","getDataCast","id","dataCast","data","cast","console","log","length","map","original_name","credit_id","KEY_API","axios","dataMovies","time_window","params","api_key","error","dataSearch","queryValue","query","dataDetails","movie_id","dataReviews"],"sourceRoot":""}